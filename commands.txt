git add <datei>  # Datei zum nächsten Commit vormerken
git commit -m "Nachricht"  # Änderungen lokal speichern
git push  # Änderungen auf den Server laden
mkdir -p <ordner>  # erstellt Ordner
touch <datei>  # erstellt leere Datei
find . -type f ! -path './.git/*' | sort > verzeichnisstruktur.txt  # erzeugt Dateiliste
pytest  # startet Tests
rm -rf .pytest_cache  # entfernt Test-Zwischenspeicher
sed -i 'alt neu' datei  # ersetzt 'alt' durch 'neu'
python src/main.py  # startet den Controller
pytest -q  # Tests ausführen
git help <befehl>  # zeigt die Hilfeseite zu einem git-Befehl
git log  # zeigt die letzten Commits
git remote -v  # listet entfernte Server auf
python -m venv venv  # erstellt virtuelle Umgebung
source venv/bin/activate  # aktiviert virtuelle Umgebung
deactivate  # beendet virtuelle Umgebung
pip install -r requirements.txt  # installiert Abhängigkeiten
git stash  # sichert aktuelle Änderungen zwischen
git rebase -i HEAD~3  # bearbeitet die letzten drei Commits interaktiv
git diff  # zeigt Unterschiede zwischen Dateien
git restore <datei>  # stellt eine Datei wieder her
cp quelle ziel  # kopiert eine Datei
tar -czf archiv.tar.gz ordner  # erstellt ein Archiv
tar -xzf archiv.tar.gz -C ziel  # entpackt ein Archiv
ls -l  # zeigt Dateien mit Details
pwd  # zeigt aktuelles Verzeichnis
cd ..  # wechselt in den Elternordner
mv quelle ziel  # verschiebt oder benennt Datei um
python --version  # zeigt installierte Python-Version
pip list  # listet installierte Pakete auf
